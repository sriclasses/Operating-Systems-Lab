diff --git a/Makefile b/Makefile
index 09d790c..3bc1f46 100644
--- a/Makefile
+++ b/Makefile
@@ -51,7 +51,7 @@ TOOLPREFIX := $(shell if i386-jos-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >/d
 endif
 
 # If the makefile can't find QEMU, specify its path here
-# QEMU = qemu-system-i386
+QEMU = qemu-system-i386
 
 # Try to infer the correct QEMU
 ifndef QEMU
@@ -181,6 +181,10 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_processlist\
+	_timewithtickets\
+	_lotterytest\
+	
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -250,7 +254,7 @@ qemu-nox-gdb: fs.img xv6.img .gdbinit
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
-	printf.c umalloc.c\
+	printf.c umalloc.c processlist.c timewithtickets.c lotterytest.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
 
diff --git a/cuth b/cuth
old mode 100755
new mode 100644
diff --git a/defs.h b/defs.h
index 82fb982..ebe3159 100644
--- a/defs.h
+++ b/defs.h
@@ -8,6 +8,7 @@ struct rtcdate;
 struct spinlock;
 struct sleeplock;
 struct stat;
+struct processInfo;
 struct superblock;
 
 // bio.c
@@ -120,6 +121,7 @@ void            userinit(void);
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+void            ticking(void);
 
 // swtch.S
 void            swtch(struct context**, struct context*);
diff --git a/dot-bochsrc b/dot-bochsrc
old mode 100755
new mode 100644
diff --git a/pr.pl b/pr.pl
old mode 100755
new mode 100644
diff --git a/printpcs b/printpcs
old mode 100755
new mode 100644
diff --git a/proc.c b/proc.c
index 806b1b1..dcd03ba 100644
--- a/proc.c
+++ b/proc.c
@@ -6,6 +6,7 @@
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
+#include "randomnumber.c"
 
 struct {
   struct spinlock lock;
@@ -88,7 +89,6 @@ allocproc(void)
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
-
   release(&ptable.lock);
 
   // Allocate kernel stack.
@@ -101,7 +101,8 @@ found:
   // Leave room for trap frame.
   sp -= sizeof *p->tf;
   p->tf = (struct trapframe*)sp;
-
+  p->tickets = 10;
+  p->ticks = 0;
   // Set up new context to start executing at forkret,
   // which returns to trapret.
   sp -= 4;
@@ -198,6 +199,7 @@ fork(void)
   }
   np->sz = curproc->sz;
   np->parent = curproc;
+  np->tickets = curproc->tickets;
   *np->tf = *curproc->tf;
 
   // Clear %eax so that fork returns 0 in the child.
@@ -332,6 +334,37 @@ scheduler(void)
 
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
+    
+    int total_tickets = 0;
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+        if(p->state == RUNNABLE)
+            total_tickets += p->tickets;
+    }
+   
+    if (total_tickets!=0) {
+    int winning_ticket = next_random() % total_tickets;
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+        if(p->state == RUNNABLE) {
+            if(winning_ticket < p->tickets) {
+                // Schedule process p
+                c->proc = p;
+                switchuvm(p);
+                p->ticks++;
+                p->state = RUNNING;
+                swtch(&(c->scheduler), p->context);
+                switchkvm();
+                // Process is done running for now.
+                // It should have changed its p->state before coming back.
+                c->proc = 0;
+                break;
+            }
+            winning_ticket -= p->tickets;
+        }
+      }
+    }
+    release(&ptable.lock);
+
+  /*
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
       if(p->state != RUNNABLE)
         continue;
@@ -342,7 +375,7 @@ scheduler(void)
       c->proc = p;
       switchuvm(p);
       p->state = RUNNING;
-
+      p->ticks++;
       swtch(&(c->scheduler), p->context);
       switchkvm();
 
@@ -350,7 +383,7 @@ scheduler(void)
       // It should have changed its p->state before coming back.
       c->proc = 0;
     }
-    release(&ptable.lock);
+    */
 
   }
 }
diff --git a/proc.h b/proc.h
index 1647114..83c970b 100644
--- a/proc.h
+++ b/proc.h
@@ -49,6 +49,8 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int tickets;
+  int ticks;
 };
 
 // Process memory is laid out contiguously, low addresses first:
@@ -56,3 +58,10 @@ struct proc {
 //   original data and bss
 //   fixed-size stack
 //   expandable heap
+struct processes_info {
+    int num_processes;
+    int pids[NPROC];
+    int ticks[NPROC];
+    int tickets[NPROC];
+};
+
diff --git a/runoff b/runoff
old mode 100755
new mode 100644
diff --git a/runoff1 b/runoff1
old mode 100755
new mode 100644
diff --git a/show1 b/show1
old mode 100755
new mode 100644
diff --git a/spinp b/spinp
old mode 100755
new mode 100644
diff --git a/syscall.c b/syscall.c
index ee85261..52009a0 100644
--- a/syscall.c
+++ b/syscall.c
@@ -103,6 +103,9 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_settickets(void);
+extern int sys_getprocessesinfo(void);
+extern int sys_yield(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +129,9 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_settickets] sys_settickets,
+[SYS_getprocessesinfo] sys_getprocessesinfo,
+[SYS_yield] sys_yield,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index bc5f356..b805438 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_settickets 22
+#define SYS_getprocessesinfo 23
+#define SYS_yield 24
diff --git a/sysproc.c b/sysproc.c
index 0686d29..6fb8584 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -6,6 +6,8 @@
 #include "memlayout.h"
 #include "mmu.h"
 #include "proc.h"
+#include "spinlock.h"
+
 
 int
 sys_fork(void)
@@ -89,3 +91,42 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+int sys_settickets(void) {
+    int number;
+    if(argint(0, &number) < 0 || number <= 0 || number > 100000)
+        return -1;
+    myproc()->tickets = number;
+    return 0;
+}
+
+extern struct {
+    struct spinlock lock;
+    struct proc proc[NPROC];
+} ptable;
+
+
+int sys_getprocessesinfo(void) {
+    struct processes_info *p;
+    if(argptr(0, (void*)&p, sizeof(*p)) < 0)
+        return -1;
+    acquire(&ptable.lock);
+    p->num_processes = 0;
+    for(struct proc *pr = ptable.proc; pr < &ptable.proc[NPROC]; pr++) {
+        if(pr->state != UNUSED) {
+            p->pids[p->num_processes] = pr->pid;
+            p->ticks[p->num_processes] = pr->ticks;
+            p->tickets[p->num_processes] = pr->tickets;
+            p->num_processes++;
+        }
+    }
+    release(&ptable.lock);
+    return 0;
+} 
+
+int 
+sys_yield(void)
+{
+  yield();
+  return 0;
+}
diff --git a/user.h b/user.h
index 4f99c52..f29e6ce 100644
--- a/user.h
+++ b/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct processes_info;
 struct rtcdate;
 
 // system calls
@@ -23,6 +24,10 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int settickets(int number);
+int getprocessesinfo(struct processes_info*);
+int yield(void);
+
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/usys.S b/usys.S
index 8bfd8a1..d6e13f6 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,7 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(settickets)
+SYSCALL(getprocessesinfo)
+SYSCALL(yield)
+
