Author: Udbhav514 <udbhavgupto0305@gmail.com>
Date:   Tue Sep 24 20:52:37 2024 +0530

diff --git a/Makefile b/Makefile
index 09d790c..1728281 100644
--- a/Makefile
+++ b/Makefile
@@ -51,7 +51,7 @@ TOOLPREFIX := $(shell if i386-jos-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >/d
 endif
 
 # If the makefile can't find QEMU, specify its path here
-# QEMU = qemu-system-i386
+QEMU = qemu-system-i386
 
 # Try to infer the correct QEMU
 ifndef QEMU
@@ -143,7 +143,7 @@ tags: $(OBJS) entryother.S _init
 vectors.S: vectors.pl
 	./vectors.pl > vectors.S
 
-ULIB = ulib.o usys.o printf.o umalloc.o
+ULIB = ulib.o usys.o printf.o umalloc.o random.o
 
 _%: %.o $(ULIB)
 	$(LD) $(LDFLAGS) -N -e main -Ttext 0 -o $@ $^
@@ -174,13 +174,18 @@ UPROGS=\
 	_kill\
 	_ln\
 	_ls\
-	_mkdir\
+	_ioProcTester\
 	_rm\
 	_sh\
 	_stressfs\
 	_usertests\
-	_wc\
+	_cpuProcTester\
 	_zombie\
+	_getNumProcTest\
+	_getMaxPIDTest\
+	_getProcInfoTest\
+	_burstTimeTest\
+	_test_scheduler\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -249,8 +254,8 @@ qemu-nox-gdb: fs.img xv6.img .gdbinit
 
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
-	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
-	printf.c umalloc.c\
+	ln.c ls.c rm.c stressfs.c usertests.c cpuProcTester.c zombie.c getNumProcTest.c getMaxPIDTest.c getProcInfoTest.c burstTimeTest.c test_scheduler.c ioProcTester.c\
+	printf.c umalloc.c random.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
 
diff --git a/defs.h b/defs.h
index 82fb982..9835425 100644
--- a/defs.h
+++ b/defs.h
@@ -8,6 +8,7 @@ struct rtcdate;
 struct spinlock;
 struct sleeplock;
 struct stat;
+struct processInfo;
 struct superblock;
 
 // bio.c
diff --git a/param.h b/param.h
index a7e90ef..1d8ea44 100644
--- a/param.h
+++ b/param.h
@@ -1,6 +1,6 @@
 #define NPROC        64  // maximum number of processes
 #define KSTACKSIZE 4096  // size of per-process kernel stack
-#define NCPU          8  // maximum number of CPUs
+#define NCPU          1  // maximum number of CPUs
 #define NOFILE       16  // open files per process
 #define NFILE       100  // open files per system
 #define NINODE       50  // maximum number of active i-nodes
diff --git a/proc.c b/proc.c
index 806b1b1..d9aa407 100644
--- a/proc.c
+++ b/proc.c
@@ -6,13 +6,23 @@
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
+#include "processInfo.h"
+// #include "user.h"
 
-struct {
+static struct proc *initproc;
+
+struct
+{
   struct spinlock lock;
   struct proc proc[NPROC];
 } ptable;
 
-static struct proc *initproc;
+struct
+{
+  struct spinlock lock;
+  int siz;
+  struct proc *proc[NPROC + 1];
+} pqueue;
 
 int nextpid = 1;
 extern void forkret(void);
@@ -20,32 +30,195 @@ extern void trapret(void);
 
 static void wakeup1(void *chan);
 
-void
-pinit(void)
+struct proc defaultParent;
+
+int isFull()
+{
+  acquire(&pqueue.lock);
+  if (pqueue.siz == NPROC)
+  {
+    release(&pqueue.lock);
+    return 1;
+  }
+  else
+  {
+    release(&pqueue.lock);
+    return 0;
+  }
+}
+
+int isEmpty()
+{
+  acquire(&pqueue.lock);
+  if (pqueue.siz == 0)
+  {
+    release(&pqueue.lock);
+    return 1;
+  }
+  else
+  {
+    release(&pqueue.lock);
+    return 0;
+  }
+}
+
+void insertIntoHeap(struct proc *p)
+{
+  if (isFull())
+    return;
+
+  acquire(&pqueue.lock);
+
+  pqueue.siz++;
+  pqueue.proc[pqueue.siz] = p;
+  int curr = pqueue.siz;
+  while (curr > 1 && ((pqueue.proc[curr]->burst_time) < (pqueue.proc[curr / 2]->burst_time)))
+  {
+    struct proc *temp = pqueue.proc[curr];
+    pqueue.proc[curr] = pqueue.proc[curr / 2];
+    pqueue.proc[curr / 2] = temp;
+    curr /= 2;
+  }
+  release(&pqueue.lock);
+}
+
+void fix(int curr)
+{
+
+  acquire(&pqueue.lock);
+  while (curr * 2 <= pqueue.siz)
+  {
+    if (curr * 2 + 1 <= pqueue.siz)
+    {
+      if ((pqueue.proc[curr]->burst_time) <= (pqueue.proc[curr * 2]->burst_time) && (pqueue.proc[curr]->burst_time) <= (pqueue.proc[curr * 2 + 1]->burst_time))
+        break;
+      else
+      {
+        if ((pqueue.proc[curr * 2]->burst_time) <= (pqueue.proc[curr * 2 + 1]->burst_time))
+        {
+          struct proc *temp = pqueue.proc[curr * 2];
+          pqueue.proc[curr * 2] = pqueue.proc[curr];
+          pqueue.proc[curr] = temp;
+          curr *= 2;
+        }
+        else
+        {
+          struct proc *temp = pqueue.proc[curr * 2 + 1];
+          pqueue.proc[curr * 2 + 1] = pqueue.proc[curr];
+          pqueue.proc[curr] = temp;
+          curr *= 2;
+          curr++;
+        }
+      }
+    }
+    else
+    {
+      if ((pqueue.proc[curr]->burst_time) <= (pqueue.proc[curr * 2]->burst_time))
+        break;
+      else
+      {
+        struct proc *temp = pqueue.proc[curr * 2];
+        pqueue.proc[curr * 2] = pqueue.proc[curr];
+        pqueue.proc[curr] = temp;
+        curr *= 2;
+      }
+    }
+  }
+  release(&pqueue.lock);
+}
+
+struct proc *extractMin()
+{
+
+  if (isEmpty())
+    return 0;
+
+  acquire(&pqueue.lock);
+  struct proc *min = pqueue.proc[1];
+  if (pqueue.siz == 1)
+  {
+    pqueue.siz = 0;
+    release(&pqueue.lock);
+  }
+  else
+  {
+    pqueue.proc[1] = pqueue.proc[pqueue.siz];
+    pqueue.siz--;
+    release(&pqueue.lock);
+
+    fix(1);
+  }
+  return min;
+}
+
+void changeKey(int pid, int x)
+{
+
+  acquire(&pqueue.lock);
+
+  struct proc *p;
+  int curr = -1;
+  for (int i = 1; i <= pqueue.siz; i++)
+  {
+    if (pqueue.proc[i]->pid == pid)
+    {
+      p = pqueue.proc[i];
+      curr = i;
+      break;
+    }
+  }
+
+  if (curr == -1)
+  {
+    release(&pqueue.lock);
+    return;
+  }
+
+  if (curr == pqueue.siz)
+  {
+    pqueue.siz--;
+    release(&pqueue.lock);
+  }
+  else
+  {
+    pqueue.proc[curr] = pqueue.proc[pqueue.siz];
+    pqueue.siz--;
+    release(&pqueue.lock);
+
+    fix(curr);
+  }
+
+  p->burst_time = x;
+  insertIntoHeap(p);
+}
+
+void pinit(void)
 {
   initlock(&ptable.lock, "ptable");
+  initlock(&pqueue.lock, "pqueue");
 }
 
 // Must be called with interrupts disabled
-int
-cpuid() {
-  return mycpu()-cpus;
+int cpuid()
+{
+  return mycpu() - cpus;
 }
 
 // Must be called with interrupts disabled to avoid the caller being
 // rescheduled between reading lapicid and running through the loop.
-struct cpu*
+struct cpu *
 mycpu(void)
 {
   int apicid, i;
-  
-  if(readeflags()&FL_IF)
+
+  if (readeflags() & FL_IF)
     panic("mycpu called with interrupts enabled\n");
-  
+
   apicid = lapicid();
   // APIC IDs are not guaranteed to be contiguous. Maybe we should have
   // a reverse map, or reserve a register to store &cpus[i].
-  for (i = 0; i < ncpu; ++i) {
+  for (i = 0; i < ncpu; ++i)
+  {
     if (cpus[i].apicid == apicid)
       return &cpus[i];
   }
@@ -54,8 +227,9 @@ mycpu(void)
 
 // Disable interrupts so that we are not rescheduled
 // while reading proc from the cpu structure
-struct proc*
-myproc(void) {
+struct proc *
+myproc(void)
+{
   struct cpu *c;
   struct proc *p;
   pushcli();
@@ -65,12 +239,12 @@ myproc(void) {
   return p;
 }
 
-//PAGEBREAK: 32
-// Look in the process table for an UNUSED proc.
-// If found, change state to EMBRYO and initialize
-// state required to run in the kernel.
-// Otherwise return 0.
-static struct proc*
+// PAGEBREAK: 32
+//  Look in the process table for an UNUSED proc.
+//  If found, change state to EMBRYO and initialize
+//  state required to run in the kernel.
+//  Otherwise return 0.
+static struct proc *
 allocproc(void)
 {
   struct proc *p;
@@ -78,8 +252,8 @@ allocproc(void)
 
   acquire(&ptable.lock);
 
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-    if(p->state == UNUSED)
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+    if (p->state == UNUSED)
       goto found;
 
   release(&ptable.lock);
@@ -88,11 +262,15 @@ allocproc(void)
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
-
+  p->nocs = 0;
+  p->parent = &defaultParent;
+  p->burst_time = 0;
+  p->rt = 0;
   release(&ptable.lock);
 
   // Allocate kernel stack.
-  if((p->kstack = kalloc()) == 0){
+  if ((p->kstack = kalloc()) == 0)
+  {
     p->state = UNUSED;
     return 0;
   }
@@ -100,33 +278,37 @@ found:
 
   // Leave room for trap frame.
   sp -= sizeof *p->tf;
-  p->tf = (struct trapframe*)sp;
+  p->tf = (struct trapframe *)sp;
 
   // Set up new context to start executing at forkret,
   // which returns to trapret.
   sp -= 4;
-  *(uint*)sp = (uint)trapret;
+  *(uint *)sp = (uint)trapret;
 
   sp -= sizeof *p->context;
-  p->context = (struct context*)sp;
+  p->context = (struct context *)sp;
   memset(p->context, 0, sizeof *p->context);
   p->context->eip = (uint)forkret;
 
   return p;
 }
 
-//PAGEBREAK: 32
-// Set up first user process.
-void
-userinit(void)
+// PAGEBREAK: 32
+//  Set up first user process.
+void userinit(void)
 {
+
+  acquire(&pqueue.lock);
+  pqueue.siz = 0;
+  release(&pqueue.lock);
+
   struct proc *p;
   extern char _binary_initcode_start[], _binary_initcode_size[];
 
   p = allocproc();
-  
+
   initproc = p;
-  if((p->pgdir = setupkvm()) == 0)
+  if ((p->pgdir = setupkvm()) == 0)
     panic("userinit: out of memory?");
   inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
   p->sz = PGSIZE;
@@ -137,7 +319,7 @@ userinit(void)
   p->tf->ss = p->tf->ds;
   p->tf->eflags = FL_IF;
   p->tf->esp = PGSIZE;
-  p->tf->eip = 0;  // beginning of initcode.S
+  p->tf->eip = 0; // beginning of initcode.S
 
   safestrcpy(p->name, "initcode", sizeof(p->name));
   p->cwd = namei("/");
@@ -148,25 +330,34 @@ userinit(void)
   // because the assignment might not be atomic.
   acquire(&ptable.lock);
 
+  // Check if the process isn't already in the heap
+  short check = (p->state != RUNNABLE);
+
   p->state = RUNNABLE;
 
+  // Insert into SJF Priority Queue.
+  if (check)
+    insertIntoHeap(p);
+
   release(&ptable.lock);
 }
 
 // Grow current process's memory by n bytes.
 // Return 0 on success, -1 on failure.
-int
-growproc(int n)
+int growproc(int n)
 {
   uint sz;
   struct proc *curproc = myproc();
 
   sz = curproc->sz;
-  if(n > 0){
-    if((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
+  if (n > 0)
+  {
+    if ((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
       return -1;
-  } else if(n < 0){
-    if((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
+  }
+  else if (n < 0)
+  {
+    if ((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
       return -1;
   }
   curproc->sz = sz;
@@ -177,20 +368,21 @@ growproc(int n)
 // Create a new process copying p as the parent.
 // Sets up stack to return as if from system call.
 // Caller must set state of returned proc to RUNNABLE.
-int
-fork(void)
+int fork(void)
 {
   int i, pid;
   struct proc *np;
   struct proc *curproc = myproc();
 
   // Allocate process.
-  if((np = allocproc()) == 0){
+  if ((np = allocproc()) == 0)
+  {
     return -1;
   }
 
   // Copy process state from proc.
-  if((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0){
+  if ((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0)
+  {
     kfree(np->kstack);
     np->kstack = 0;
     np->state = UNUSED;
@@ -203,8 +395,8 @@ fork(void)
   // Clear %eax so that fork returns 0 in the child.
   np->tf->eax = 0;
 
-  for(i = 0; i < NOFILE; i++)
-    if(curproc->ofile[i])
+  for (i = 0; i < NOFILE; i++)
+    if (curproc->ofile[i])
       np->ofile[i] = filedup(curproc->ofile[i]);
   np->cwd = idup(curproc->cwd);
 
@@ -214,8 +406,13 @@ fork(void)
 
   acquire(&ptable.lock);
 
+  short check = (np->state != RUNNABLE);
   np->state = RUNNABLE;
 
+  // Insert Process Into Queue
+  if (check)
+    insertIntoHeap(np);
+
   release(&ptable.lock);
 
   return pid;
@@ -224,19 +421,20 @@ fork(void)
 // Exit the current process.  Does not return.
 // An exited process remains in the zombie state
 // until its parent calls wait() to find out it exited.
-void
-exit(void)
+void exit(void)
 {
   struct proc *curproc = myproc();
   struct proc *p;
   int fd;
 
-  if(curproc == initproc)
+  if (curproc == initproc)
     panic("init exiting");
 
   // Close all open files.
-  for(fd = 0; fd < NOFILE; fd++){
-    if(curproc->ofile[fd]){
+  for (fd = 0; fd < NOFILE; fd++)
+  {
+    if (curproc->ofile[fd])
+    {
       fileclose(curproc->ofile[fd]);
       curproc->ofile[fd] = 0;
     }
@@ -253,10 +451,12 @@ exit(void)
   wakeup1(curproc->parent);
 
   // Pass abandoned children to init.
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-    if(p->parent == curproc){
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  {
+    if (p->parent == curproc)
+    {
       p->parent = initproc;
-      if(p->state == ZOMBIE)
+      if (p->state == ZOMBIE)
         wakeup1(initproc);
     }
   }
@@ -269,23 +469,36 @@ exit(void)
 
 // Wait for a child process to exit and return its pid.
 // Return -1 if this process has no children.
-int
-wait(void)
+int wait(void)
 {
   struct proc *p;
   int havekids, pid;
   struct proc *curproc = myproc();
-  
+
   acquire(&ptable.lock);
-  for(;;){
+  for (;;)
+  {
     // Scan through table looking for exited children.
     havekids = 0;
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->parent != curproc)
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+    {
+      if (p->parent != curproc)
         continue;
       havekids = 1;
-      if(p->state == ZOMBIE){
+      if (p->state == ZOMBIE)
+      {
         // Found one.
+
+        // Remove p from pqueue.
+        changeKey(p->pid, 0);
+        // acquire(&pqueue.lock);
+
+        if ((pqueue.proc[1]->burst_time == 0) && (pqueue.proc[1]->pid == p->pid))
+          extractMin();
+
+        // release(&pqueue.lock);
+        release(&ptable.lock);
+
         pid = p->pid;
         kfree(p->kstack);
         p->kstack = 0;
@@ -295,63 +508,105 @@ wait(void)
         p->name[0] = 0;
         p->killed = 0;
         p->state = UNUSED;
-        release(&ptable.lock);
+
         return pid;
       }
     }
 
     // No point waiting if we don't have any children.
-    if(!havekids || curproc->killed){
+    if (!havekids || curproc->killed)
+    {
       release(&ptable.lock);
       return -1;
     }
 
     // Wait for children to exit.  (See wakeup1 call in proc_exit.)
-    sleep(curproc, &ptable.lock);  //DOC: wait-sleep
+    sleep(curproc, &ptable.lock); // DOC: wait-sleep
   }
 }
 
-//PAGEBREAK: 42
-// Per-CPU process scheduler.
-// Each CPU calls scheduler() after setting itself up.
-// Scheduler never returns.  It loops, doing:
-//  - choose a process to run
-//  - swtch to start running that process
-//  - eventually that process transfers control
-//      via swtch back to the scheduler.
-void
-scheduler(void)
+// PAGEBREAK: 42
+//  Per-CPU process scheduler.
+//  Each CPU calls scheduler() after setting itself up.
+//  Scheduler never returns.  It loops, doing:
+//   - choose a process to run
+//   - swtch to start running that process
+//   - eventually that process transfers control
+//       via swtch back to the scheduler.
+void scheduler(void)
 {
+
+  defaultParent.pid = -2;
   struct proc *p;
   struct cpu *c = mycpu();
   c->proc = 0;
-  
-  for(;;){
+
+  for (;;)
+  {
     // Enable interrupts on this processor.
     sti();
 
-    // Loop over process table looking for process to run.
     acquire(&ptable.lock);
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->state != RUNNABLE)
-        continue;
 
-      // Switch to chosen process.  It is the process's job
-      // to release ptable.lock and then reacquire it
-      // before jumping back to us.
-      c->proc = p;
-      switchuvm(p);
-      p->state = RUNNING;
+    // NEW SJF SCHEDULER
 
-      swtch(&(c->scheduler), p->context);
-      switchkvm();
+    if ((p = extractMin()) == 0)
+    {
+      release(&ptable.lock);
+      continue;
+    }
 
-      // Process is done running for now.
-      // It should have changed its p->state before coming back.
-      c->proc = 0;
+    if (p->state != RUNNABLE)
+    {
+      release(&ptable.lock);
+      continue;
     }
-    release(&ptable.lock);
 
+    c->proc = p;
+    switchuvm(p);
+
+    p->state = RUNNING;
+    (p->nocs)++;
+
+    swtch(&(c->scheduler), p->context);
+
+    switchkvm();
+
+    c->proc = 0;
+
+    // //THE OLD ROUND ROBIN SCHEDULER
+
+    // // Loop over process table looking for process to run.
+    // for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    // // while(!isEmpty()){
+    // //   p=extractMin();
+    //   // struct proc *temp = p;
+    //   // if(isEmpty())
+    //   //   break;
+
+    //   // p=extractMin();
+
+    //   if(p->state != RUNNABLE)
+    //     continue;
+
+    //   // Switch to chosen process.  It is the process's job
+    //   // to release ptable.lock and then reacquire it
+    //   // before jumping back to us.
+    //   c->proc = p;
+    //   switchuvm(p);
+    //   p->state = RUNNING;
+    //   (p->nocs)++;
+
+    //   swtch(&(c->scheduler), p->context);
+    //   switchkvm();
+
+    //   // Process is done running for now.
+    //   // It should have changed its p->state before coming back.
+    //   c->proc = 0;
+    //   // p=temp;
+    // }
+
+    release(&ptable.lock);
   }
 }
 
@@ -362,19 +617,18 @@ scheduler(void)
 // be proc->intena and proc->ncli, but that would
 // break in the few places where a lock is held but
 // there's no process.
-void
-sched(void)
+void sched(void)
 {
   int intena;
   struct proc *p = myproc();
 
-  if(!holding(&ptable.lock))
+  if (!holding(&ptable.lock))
     panic("sched ptable.lock");
-  if(mycpu()->ncli != 1)
+  if (mycpu()->ncli != 1)
     panic("sched locks");
-  if(p->state == RUNNING)
+  if (p->state == RUNNING)
     panic("sched running");
-  if(readeflags()&FL_IF)
+  if (readeflags() & FL_IF)
     panic("sched interruptible");
   intena = mycpu()->intena;
   swtch(&p->context, mycpu()->scheduler);
@@ -382,25 +636,29 @@ sched(void)
 }
 
 // Give up the CPU for one scheduling round.
-void
-yield(void)
+void yield(void)
 {
-  acquire(&ptable.lock);  //DOC: yieldlock
+  acquire(&ptable.lock); // DOC: yieldlock
+  short check = (myproc()->state != RUNNABLE);
   myproc()->state = RUNNABLE;
+
+  if (check)
+    insertIntoHeap(myproc());
+
   sched();
   release(&ptable.lock);
 }
 
 // A fork child's very first scheduling by scheduler()
 // will swtch here.  "Return" to user space.
-void
-forkret(void)
+void forkret(void)
 {
   static int first = 1;
   // Still holding ptable.lock from scheduler.
   release(&ptable.lock);
 
-  if (first) {
+  if (first)
+  {
     // Some initialization functions must be run in the context
     // of a regular process (e.g., they call sleep), and thus cannot
     // be run from main().
@@ -414,15 +672,14 @@ forkret(void)
 
 // Atomically release lock and sleep on chan.
 // Reacquires lock when awakened.
-void
-sleep(void *chan, struct spinlock *lk)
+void sleep(void *chan, struct spinlock *lk)
 {
   struct proc *p = myproc();
-  
-  if(p == 0)
+
+  if (p == 0)
     panic("sleep");
 
-  if(lk == 0)
+  if (lk == 0)
     panic("sleep without lk");
 
   // Must acquire ptable.lock in order to
@@ -431,8 +688,9 @@ sleep(void *chan, struct spinlock *lk)
   // guaranteed that we won't miss any wakeup
   // (wakeup runs with ptable.lock locked),
   // so it's okay to release lk.
-  if(lk != &ptable.lock){  //DOC: sleeplock0
-    acquire(&ptable.lock);  //DOC: sleeplock1
+  if (lk != &ptable.lock)
+  {                        // DOC: sleeplock0
+    acquire(&ptable.lock); // DOC: sleeplock1
     release(lk);
   }
   // Go to sleep.
@@ -445,28 +703,35 @@ sleep(void *chan, struct spinlock *lk)
   p->chan = 0;
 
   // Reacquire original lock.
-  if(lk != &ptable.lock){  //DOC: sleeplock2
+  if (lk != &ptable.lock)
+  { // DOC: sleeplock2
     release(&ptable.lock);
     acquire(lk);
   }
 }
 
-//PAGEBREAK!
-// Wake up all processes sleeping on chan.
-// The ptable lock must be held.
+// PAGEBREAK!
+//  Wake up all processes sleeping on chan.
+//  The ptable lock must be held.
 static void
 wakeup1(void *chan)
 {
   struct proc *p;
 
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-    if(p->state == SLEEPING && p->chan == chan)
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+    if (p->state == SLEEPING && p->chan == chan)
+    {
+      short check = (p->state != RUNNABLE);
+
       p->state = RUNNABLE;
+
+      if (check)
+        insertIntoHeap(p);
+    }
 }
 
 // Wake up all processes sleeping on chan.
-void
-wakeup(void *chan)
+void wakeup(void *chan)
 {
   acquire(&ptable.lock);
   wakeup1(chan);
@@ -476,18 +741,26 @@ wakeup(void *chan)
 // Kill the process with the given pid.
 // Process won't exit until it returns
 // to user space (see trap in trap.c).
-int
-kill(int pid)
+int kill(int pid)
 {
   struct proc *p;
 
   acquire(&ptable.lock);
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-    if(p->pid == pid){
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  {
+    if (p->pid == pid)
+    {
       p->killed = 1;
       // Wake process from sleep if necessary.
-      if(p->state == SLEEPING)
+      if (p->state == SLEEPING)
+      {
+        short check = (p->state != RUNNABLE);
+
         p->state = RUNNABLE;
+
+        if (check)
+          insertIntoHeap(p);
+      }
       release(&ptable.lock);
       return 0;
     }
@@ -496,39 +769,156 @@ kill(int pid)
   return -1;
 }
 
-//PAGEBREAK: 36
-// Print a process listing to console.  For debugging.
-// Runs when user types ^P on console.
-// No lock to avoid wedging a stuck machine further.
-void
-procdump(void)
+// PAGEBREAK: 36
+//  Print a process listing to console.  For debugging.
+//  Runs when user types ^P on console.
+//  No lock to avoid wedging a stuck machine further.
+void procdump(void)
 {
   static char *states[] = {
-  [UNUSED]    "unused",
-  [EMBRYO]    "embryo",
-  [SLEEPING]  "sleep ",
-  [RUNNABLE]  "runble",
-  [RUNNING]   "run   ",
-  [ZOMBIE]    "zombie"
-  };
+      [UNUSED] "unused",
+      [EMBRYO] "embryo",
+      [SLEEPING] "sleep ",
+      [RUNNABLE] "runble",
+      [RUNNING] "run   ",
+      [ZOMBIE] "zombie"};
   int i;
   struct proc *p;
   char *state;
   uint pc[10];
 
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-    if(p->state == UNUSED)
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  {
+    if (p->state == UNUSED)
       continue;
-    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
+    if (p->state >= 0 && p->state < NELEM(states) && states[p->state])
       state = states[p->state];
     else
       state = "???";
     cprintf("%d %s %s", p->pid, state, p->name);
-    if(p->state == SLEEPING){
-      getcallerpcs((uint*)p->context->ebp+2, pc);
-      for(i=0; i<10 && pc[i] != 0; i++)
+    if (p->state == SLEEPING)
+    {
+      getcallerpcs((uint *)p->context->ebp + 2, pc);
+      for (i = 0; i < 10 && pc[i] != 0; i++)
         cprintf(" %p", pc[i]);
     }
     cprintf("\n");
   }
 }
+
+int getNumProcAssist(void)
+{
+
+  int ans = 0;
+  struct proc *p;
+
+  acquire(&ptable.lock);
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  {
+    if (p->state != UNUSED)
+      ans++;
+  }
+  release(&ptable.lock);
+
+  return ans;
+}
+
+int getMaxPIDAssist(void)
+{
+
+  int max = 0;
+  struct proc *p;
+
+  acquire(&ptable.lock);
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  {
+    if (p->state != UNUSED)
+    {
+      if (p->pid > max)
+        max = p->pid;
+    }
+  }
+  release(&ptable.lock);
+
+  return max;
+}
+
+struct processInfo getProcInfoAssist(int pid)
+{
+
+  struct proc *p;
+  struct processInfo temp = {-1, 0, 0};
+
+  acquire(&ptable.lock);
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  {
+    if (p->state != UNUSED)
+    {
+      // printf(1, "%d\n", p->pid);
+      if (p->pid == pid)
+      {
+        temp.ppid = p->parent->pid;
+        temp.psize = p->sz;
+        temp.numberContextSwitches = p->nocs;
+        release(&ptable.lock);
+        return temp;
+      }
+    }
+  }
+  release(&ptable.lock);
+
+  return temp;
+}
+
+int set_burst_timeAssist(int burst_time)
+{
+  struct proc *p = myproc();
+  p->burst_time = burst_time;
+  yield();
+
+  return 0;
+}
+
+int get_burst_timeAssist()
+{
+  struct proc *p = myproc();
+
+  return p->burst_time;
+}
+
+struct processInfo
+getCurrentInfoAssist()
+{
+
+  struct proc *p;
+  struct processInfo temp = {-1, 0, 0};
+
+  acquire(&ptable.lock);
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  {
+    if (p->state != UNUSED)
+    {
+      // printf(1, "%d\n", p->pid);
+      if (p == myproc())
+      {
+        temp.ppid = p->parent->pid;
+        temp.psize = p->sz;
+        temp.numberContextSwitches = p->nocs;
+        release(&ptable.lock);
+        return temp;
+      }
+    }
+  }
+  release(&ptable.lock);
+
+  return temp;
+}
+
+int getCurrentPIDAssist(void)
+{
+
+  if (!myproc())
+    return -1;
+
+  return myproc()->pid;
+}
\ No newline at end of file
diff --git a/proc.h b/proc.h
index 1647114..130cd60 100644
--- a/proc.h
+++ b/proc.h
@@ -49,6 +49,10 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int nocs;                    //Number of context switches
+  int burst_time;              //Burst time duhhh
+  int rt;                      //running time
+
 };
 
 // Process memory is laid out contiguously, low addresses first:
@@ -56,3 +60,13 @@ struct proc {
 //   original data and bss
 //   fixed-size stack
 //   expandable heap
+
+
+
+int getNumProcAssist(void);
+int getMaxPIDAssist(void);
+struct processInfo getProcInfoAssist(int pid);
+int set_burst_timeAssist(int burst_time);
+int get_burst_timeAssist();
+struct processInfo getCurrentInfoAssist();
+int getCurrentPIDAssist(void);
\ No newline at end of file
diff --git a/syscall.c b/syscall.c
index ee85261..f573d6d 100644
--- a/syscall.c
+++ b/syscall.c
@@ -103,6 +103,13 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_getNumProc(void);
+extern int sys_getMaxPID(void);
+extern int sys_getProcInfo(void);
+extern int sys_set_burst_time(void);
+extern int sys_get_burst_time(void);
+extern int sys_getCurrentInfo(void);
+extern int sys_getCurrentPID(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +133,13 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_getNumProc] sys_getNumProc,
+[SYS_getMaxPID] sys_getMaxPID,
+[SYS_getProcInfo] sys_getProcInfo,
+[SYS_set_burst_time] sys_set_burst_time,
+[SYS_get_burst_time] sys_get_burst_time,
+[SYS_getCurrentInfo] sys_getCurrentInfo,
+[SYS_getCurrentPID] sys_getCurrentPID,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index bc5f356..1e744c6 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,11 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_getNumProc 22
+#define SYS_getMaxPID 23
+#define SYS_getProcInfo 24
+#define SYS_set_burst_time 25
+#define SYS_get_burst_time 26
+#define SYS_test_scheduler 27
+#define SYS_getCurrentInfo 28
+#define SYS_getCurrentPID 29
\ No newline at end of file
diff --git a/sysproc.c b/sysproc.c
index 0686d29..bd4cdb0 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -6,68 +6,64 @@
 #include "memlayout.h"
 #include "mmu.h"
 #include "proc.h"
+#include "processInfo.h"
 
-int
-sys_fork(void)
+int sys_fork(void)
 {
   return fork();
 }
 
-int
-sys_exit(void)
+int sys_exit(void)
 {
   exit();
-  return 0;  // not reached
+  return 0; // not reached
 }
 
-int
-sys_wait(void)
+int sys_wait(void)
 {
   return wait();
 }
 
-int
-sys_kill(void)
+int sys_kill(void)
 {
   int pid;
 
-  if(argint(0, &pid) < 0)
+  if (argint(0, &pid) < 0)
     return -1;
   return kill(pid);
 }
 
-int
-sys_getpid(void)
+int sys_getpid(void)
 {
   return myproc()->pid;
 }
 
-int
-sys_sbrk(void)
+int sys_sbrk(void)
 {
   int addr;
   int n;
 
-  if(argint(0, &n) < 0)
+  if (argint(0, &n) < 0)
     return -1;
   addr = myproc()->sz;
-  if(growproc(n) < 0)
+  if (growproc(n) < 0)
     return -1;
   return addr;
 }
 
-int
-sys_sleep(void)
+int sys_sleep(void)
 {
   int n;
   uint ticks0;
 
-  if(argint(0, &n) < 0)
+  if (argint(0, &n) < 0)
     return -1;
   acquire(&tickslock);
   ticks0 = ticks;
-  while(ticks - ticks0 < n){
-    if(myproc()->killed){
+  while (ticks - ticks0 < n)
+  {
+    if (myproc()->killed)
+    {
       release(&tickslock);
       return -1;
     }
@@ -79,8 +75,7 @@ sys_sleep(void)
 
 // return how many clock tick interrupts have occurred
 // since start.
-int
-sys_uptime(void)
+int sys_uptime(void)
 {
   uint xticks;
 
@@ -89,3 +84,68 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+int sys_getNumProc(void)
+{
+
+  return getNumProcAssist();
+}
+
+int sys_getMaxPID(void)
+{
+
+  return getMaxPIDAssist();
+}
+
+int sys_getProcInfo(void)
+{
+  int pid;
+
+  struct processInfo *info;
+  argptr(0, (void *)&pid, sizeof(pid));
+  argptr(1, (void *)&info, sizeof(info));
+
+  struct processInfo temporaryInfo = getProcInfoAssist(pid);
+
+  if (temporaryInfo.ppid == -1)
+    return -1;
+
+  info->ppid = temporaryInfo.ppid;
+  info->psize = temporaryInfo.psize;
+  info->numberContextSwitches = temporaryInfo.numberContextSwitches;
+  return 0;
+}
+
+int sys_set_burst_time(void)
+{
+  int burst_time;
+  argptr(0, (void *)&burst_time, sizeof(burst_time));
+
+  return set_burst_timeAssist(burst_time);
+}
+
+int sys_get_burst_time(void)
+{
+  return get_burst_timeAssist();
+}
+
+int sys_getCurrentInfo(void)
+{
+  struct processInfo *info;
+  argptr(0, (void *)&info, sizeof(info));
+
+  struct processInfo temporaryInfo = getCurrentInfoAssist();
+
+  if (temporaryInfo.ppid == -1)
+    return -1;
+
+  info->ppid = temporaryInfo.ppid;
+  info->psize = temporaryInfo.psize;
+  info->numberContextSwitches = temporaryInfo.numberContextSwitches;
+  return 0;
+}
+
+int sys_getCurrentPID(void)
+{
+  return getCurrentPIDAssist();
+}
\ No newline at end of file
diff --git a/trap.c b/trap.c
index 41c66eb..fe3e223 100644
--- a/trap.c
+++ b/trap.c
@@ -8,47 +8,46 @@
 #include "traps.h"
 #include "spinlock.h"
 
-// Interrupt descriptor table (shared by all CPUs).
 struct gatedesc idt[256];
-extern uint vectors[];  // in vectors.S: array of 256 entry pointers
+extern uint vectors[]; // in vectors.S: array of 256 entry pointers
 struct spinlock tickslock;
 uint ticks;
 
-void
-tvinit(void)
+void tvinit(void)
 {
   int i;
 
-  for(i = 0; i < 256; i++)
-    SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
-  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
+  for (i = 0; i < 256; i++)
+    SETGATE(idt[i], 0, SEG_KCODE << 3, vectors[i], 0);
+  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE << 3, vectors[T_SYSCALL], DPL_USER);
 
   initlock(&tickslock, "time");
 }
 
-void
-idtinit(void)
+void idtinit(void)
 {
   lidt(idt, sizeof(idt));
 }
 
-//PAGEBREAK: 41
-void
-trap(struct trapframe *tf)
+// PAGEBREAK: 41
+void trap(struct trapframe *tf)
 {
-  if(tf->trapno == T_SYSCALL){
-    if(myproc()->killed)
+  if (tf->trapno == T_SYSCALL)
+  {
+    if (myproc()->killed)
       exit();
     myproc()->tf = tf;
     syscall();
-    if(myproc()->killed)
+    if (myproc()->killed)
       exit();
     return;
   }
 
-  switch(tf->trapno){
+  switch (tf->trapno)
+  {
   case T_IRQ0 + IRQ_TIMER:
-    if(cpuid() == 0){
+    if (cpuid() == 0)
+    {
       acquire(&tickslock);
       ticks++;
       wakeup(&ticks);
@@ -60,8 +59,7 @@ trap(struct trapframe *tf)
     ideintr();
     lapiceoi();
     break;
-  case T_IRQ0 + IRQ_IDE+1:
-    // Bochs generates spurious IDE1 interrupts.
+  case T_IRQ0 + IRQ_IDE + 1:
     break;
   case T_IRQ0 + IRQ_KBD:
     kbdintr();
@@ -78,9 +76,9 @@ trap(struct trapframe *tf)
     lapiceoi();
     break;
 
-  //PAGEBREAK: 13
   default:
-    if(myproc() == 0 || (tf->cs&3) == 0){
+    if (myproc() == 0 || (tf->cs & 3) == 0)
+    {
       // In kernel, it must be our mistake.
       cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
               tf->trapno, cpuid(), tf->eip, rcr2());
@@ -95,18 +93,12 @@ trap(struct trapframe *tf)
   }
 
   // Force process exit if it has been killed and is in user space.
-  // (If it is still executing in the kernel, let it keep running
-  // until it gets to the regular system call return.)
-  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+  if (myproc() && myproc()->killed && (tf->cs & 3) == DPL_USER)
     exit();
 
   // Force process to give up CPU on clock tick.
-  // If interrupts were on while locks held, would need to check nlock.
-  if(myproc() && myproc()->state == RUNNING &&
-     tf->trapno == T_IRQ0+IRQ_TIMER)
-    yield();
 
   // Check if the process has been killed since we yielded
-  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+  if (myproc() && myproc()->killed && (tf->cs & 3) == DPL_USER)
     exit();
 }
diff --git a/user.h b/user.h
index 4f99c52..ea4836e 100644
--- a/user.h
+++ b/user.h
@@ -1,3 +1,7 @@
+#ifndef USER_H
+#define USER_H
+
+#include "processInfo.h"
 struct stat;
 struct rtcdate;
 
@@ -23,6 +27,13 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int getNumProc(void);
+int getMaxPID(void);
+int getProcInfo(int, struct processInfo*);
+int set_burst_time(int);
+int get_burst_time();
+int getCurrentInfo(struct processInfo *);
+int getCurrentPID();
 
 // ulib.c
 int stat(const char*, struct stat*);
@@ -37,3 +48,6 @@ void* memset(void*, int, uint);
 void* malloc(uint);
 void free(void*);
 int atoi(const char*);
+int randomrange(int, int);
+
+#endif
\ No newline at end of file
diff --git a/usys.S b/usys.S
index 8bfd8a1..a205081 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,10 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(getNumProc)
+SYSCALL(getMaxPID)
+SYSCALL(getProcInfo)
+SYSCALL(set_burst_time)
+SYSCALL(get_burst_time)
+SYSCALL(getCurrentInfo)
+SYSCALL(getCurrentPID)
\ No newline at end of file
